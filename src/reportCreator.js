var fs = require('fs');
var stream = false;

exports.writing = false;

exports.write = function(path, domains, callback){
	exports.writing = true;
	var css = fs.createReadStream('src/report.css');
	css.on('error', function(e){console.log('Error reading css file: ' + e)});
	
	stream = fs.createWriteStream(path + '/' + domains.baseUrl + ' - Detailed Report.html');
	stream.on('error', function(e){console.log('Error writing to file: ' + e)});
	stream.on('finish', function() {exports.writing = false; callback(); });
	
	writeHead();
	css.pipe(stream, { end: false });
	css.on('end', function() { 
		writeBody(domains);
		stream.end();
	});
	
	//TODO - Need to check when writing ends so that we can close the program! ==> provide a callback to stream.on('finish')
	
	//TODO - Create report summary
	//TODO - Add visual indicator for active/passive mixed content & other relevant stuff in report --> instead of a button, we could have a colored [+], red for active, orange for warn...
	
}

function writeHead(){
	
	stream.write('<!DOCTYPE html><html><head><meta charset="utf-8">\r\n');
	stream.write('<TITLE>SSL-Yeah! - Detailed Report</TITLE>\r\n');
	stream.write('<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>\r\n');
	stream.write('<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/themes/smoothness/jquery-ui.css" />\r\n');
	stream.write('<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js"></script>\r\n');
	stream.write('<style media="screen" type="text/css">');
}

function writeBody(domains){
	stream.write('</style></head>\r\n');
	stream.write('<body>\r\n');
	
	//********** Summary & Prep *************//
	
	domains.sort(function (a, b) {
		if (a.url > b.url) { return 1; }
		if (a.url < b.url) { return -1; }
		return 0;
	});
	
	var statusCount = { 'pass': 0, 'mixedPassive': 0, 'mixedActive': 0, 'connectionError': 0, 'other': 0};
	domains.forEach(function(domain){
		switch(domain.getFinalAssessment()){
			case domains.constants['pass']:
				statusCount['pass'] ++;
				domain.cssClass = 'green';
				break;
			case domains.constants['mixedPassive']:
				statusCount['mixedPassive'] ++;
				domain.cssClass = 'yellow';
				break;
			case domains.constants['noValidResponse']:
			case domains.constants['redirect']:
			case domains.constants['undefined']:
				statusCount['other'] ++;
				domain.cssClass = 'grey';
				break;
			case domains.constants['mixedActive']:
				statusCount['mixedActive'] ++;
				domain.cssClass = 'red';
				break;
			case domains.constants['connectionError']:
				statusCount['connectionError'] ++;
				domain.cssClass = 'red';
		}
		domain.pages.forEach(function(page){
			if(page.activeMixedContent.length || page.status == domains.constants['connectionError']){
				page.cssClass = "red";
			}else if(page.passiveMixedContent.length){
				page.cssClass = "yellow";
			}else if (page.status = domains.constants['redirect'] || page.status == domains.constants['noValidResponse']){
				page.cssClass = "grey";
			}else{
				page.cssClass = "";
			}
		});

	});
		
	stream.write('<div class="topBar"><img src="https://upload.wikimedia.org/wikipedia/commons/e/e6/Nuvola_mimetypes_encrypted.png">\r\n');
	stream.write('Report generated by SSL-Yeah!<br><a href="https://github.com/guiweber/ssl-yeah">https://github.com/guiweber/ssl-yeah</a></div>\r\n');
	stream.write('<div class="summary"><table>\r\n');
	stream.write('<tr><th colspan="4">HTTPS Test Report - '+domains.baseUrl+'</th></tr>\r\n');
	stream.write('<tr><td colspan="4">'+domains.length+' sub-domains tested</td></tr>\r\n');
	stream.write('<tr><td><div class="button green" ></div></td><td>'+statusCount['pass']+'</td><td>'+domains.constants['pass']+'</td><td>All the pages tested in these domains serve all content over HTTPS</td></tr>\r\n');
	stream.write('<tr><td><div class="button yellow" ></div></td><td>'+statusCount['mixedPassive']+'</td><td>'+domains.constants['mixedPassive']+'</td><td>Some or all pages tested in these domains serve passive content (i.e. images) over HTTP when HTTPS is requested. The images will load anyway but this could represent a security issue, and will trigger a mixed content warning in the browser.</td></tr>\r\n');
	stream.write('<tr><td><div class="button red" ></div></td><td>'+statusCount['mixedActive']+'</td><td>'+domains.constants['mixedActive']+'</td><td>Some or all pages tested in these domains serve active content (i.e. stylesheets, scripts, objects) over HTTP when HTTPS is requested. The content will not be loaded by the browser, which will be detrimental to the user experience.</td></tr>\r\n');
	stream.write('<tr><td><div class="button red" ></div></td><td>'+statusCount['connectionError']+'</td><td>'+domains.constants['connectionError']+'</td><td>A secure connection could not be established to these hosts. Common causes are expired or invalid certificates, or invalid addresses.</td></tr>\r\n');
	stream.write('<tr><td><div class="button grey" ></div></td><td>'+statusCount['other']+'</td><td>N/A (No content tested)</td><td>All pages in these domains were either rejected in conformity with robots.txt or internal URL standards, redirected to another location, or retured an invalid response (e.g. 403 - Forbidden, 404 - Not Found, etc...)</td></tr>\r\n');
	stream.write('<tr><td colspan="4">Click on the the color-coded buttons in the list below to show the details for each page/domain when availble.</td></tr>\r\n');
	stream.write('</table></div>\r\n\r\n');

	
	//********** Detailed Report *********//
	var idCounter = 0;
	
	stream.write('<div class="domainList">\r\n');
	domains.forEach(function(domain){
		idCounter ++;
		stream.write('\r\n<h2><div class="button '+domain.cssClass+'" onClick="$(\'#domain_'+idCounter+'\').toggle(500)"></div>');
		stream.write(domain.url + ' - ' + domain.pages.length +' pages tested - ' + domain.getFinalAssessment() + '</h2>');
		stream.write('<div id="domain_'+ idCounter +'" style="display: none;">');
		if(domain.pages.length == 0){
			stream.write('<div class="details">No page could be tested for this domain. Check  <a href="https://'+domain.url+'/robots.txt" target="_blank">robots.txt</a> to see if robots are allowed.</div>'); 
		}
		domain.pages.forEach(function(page){
			idCounter ++;
			stream.write('\r\n<div class="pageTitleContainer">'); 
			if(page.passiveMixedContent.length || page.activeMixedContent.length || page.message || page.redirectedTo){ 
				stream.write('<div class="button '+page.cssClass+'" onClick="$(\'#page_'+idCounter+'\').toggle(600)"></div>'); 
			}else{ 
				stream.write('<div class="spacer"></div>'); 
			}
			stream.write('\r\n<div class="pageTitle">HTTP Status: '+page.httpStatus+' - <a href="https://' + page.url + '">'+ page.url.substring(0,150) +'</a></div></div>');
			if(page.passiveMixedContent.length || page.activeMixedContent.length || page.message || page.redirectedTo){
				stream.write('\r\n<div id="page_'+ idCounter +'" class="details" style="display: none;">');
				if(page.message){stream.write('Error: '+page.message+'<br>');}
				if(page.redirectedTo){stream.write('Redirected to: '+page.redirectedTo.substring(0,150)+'<br>');}
				if(page.activeMixedContent.length){
					stream.write('\r\n<h4>Active Mixed Content</h4>');
					page.activeMixedContent.forEach(function(content){stream.write('\r\n' + content + '<br>');});
				}
				if(page.passiveMixedContent.length){
					stream.write('\r\n<h4>Passive Mixed Content</h4>');
					page.passiveMixedContent.forEach(function(content){stream.write('\r\n' + content + '<br>');});
				}
				stream.write('</div>');
			}
		});
		stream.write('</div>');
	});
	
	stream.write('</div></body></html>');
}