var fs = require('fs');
var stream = false;

exports.writing = false;

exports.write = function(path, domains, callback){
	exports.writing = true;
	stream = fs.createWriteStream(path + '/' + domains.baseUrl + '.xml');
	stream.on('error', function(e){console.log('error writing to file: ' + e)})
	stream.on('finish', function() {exports.writing = false; callback(); });
	write_rule(domains);
	stream.end();
}

function getTargets(domains){
	var targets = [];
	
	domains.forEach(function(domain){
		var status = domain.getFinalAssessment();
		if(status == domains.constants['pass'] || status == domains.constants['mixedPassive']){
			targets.push(domain.url);
		}
	});

	return targets.sort();
}

function write_rule(domains){
	
	var targets = getTargets(domains);
	var name = domains.baseUrl;
	
	if(targets.length != domains.length){
		name = name + ' (partial)';
	}
	
	stream.write('<!--\r\n\tThis ruleset was created by SSL-Yeah! (https://github.com/guiweber/ssl-yeah) \r\n-->\r\n\r\n');
	stream.write('<!--\r\n\tIMPORTANT - There is still some work to do manually to make sure you have a quality ruleset:\r\n\r\n');
	stream.write('\t1.\r\n\tRead the detailed report generated by SSL-Yeah. By default, sub-domains with any active mixed content will not be included in the rules, \r\n\tbut if you see that only a few pages are affected, you may want to add that subdomain and fine tune the rule.\r\n\r\n');
	stream.write('\t2.\r\n\tA "Secure Cookie" rule has been created for all the sub-domains in the ruleset, but they need to be tested manually to make sure this does not cause any issue.\r\n\r\n');
	stream.write('\t3.\r\n\tYou might want to change the ruleset name to display the organisation name rather than the base domain name.\r\n\r\n');
	stream.write('\t4.\r\n\tMake sure to remove these instructions and to test your new rule carefully before publishing it.\r\n');
	stream.write('-->\r\n');

	
	stream.write('<ruleset name="'+ name +'">\r\n\r\n');
	
	targets.forEach(function(target){
		stream.write('\t<target host="'+ target +'">\r\n');
	});
	
	stream.write('\r\n');
	
	targets.forEach(function(target){
		stream.write('\t<securecookie host="'+ target +'" name=".+">\r\n');
	});
	
	
	stream.write('\r\n\t<rule from="^http:" to="https:" />\r\n\r\n');
	stream.write('</ruleset>');
	
	
}


