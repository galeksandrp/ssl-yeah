var fs = require('fs');
const constants = require('./constants.js');

exports.write = function(path, crawler, callback){
	crawler.writingReport = true;
	var css = fs.createReadStream('modules/report.css');
	css.on('error', function(e){console.log('Error reading css file: ' + e)});

	var stream = fs.createWriteStream(path + '/' + crawler.baseHost + ' - Detailed Report.html');
	stream.on('error', function(e){console.log('Error writing to file: ' + e)});
	stream.on('finish', function() {crawler.writingReport = false; callback(); });

	writeHead(stream);
	css.pipe(stream, { end: false });
	css.on('end', function() {
		writeBody(crawler, stream);
		stream.end();
	});

	//TODO - Need to check when writing ends so that we can close the program! ==> provide a callback to stream.on('finish')

	//TODO - Create report summary
	//TODO - Add visual indicator for active/passive mixed content & other relevant stuff in report --> instead of a button, we could have a colored [+], red for active, orange for warn...

}

function writeHead(stream){

	stream.write('<!DOCTYPE html><html><head><meta charset="utf-8">\r\n');
	stream.write('<TITLE>SSL-Yeah! - Detailed Report</TITLE>\r\n');
	stream.write('<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>\r\n');
	stream.write('<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/themes/smoothness/jquery-ui.css" />\r\n');
	stream.write('<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js"></script>\r\n');
	stream.write('<style media="screen" type="text/css">');
}

function writeBody(crawler, stream){
	stream.write('</style></head>\r\n');
	stream.write('<body>\r\n');

	//********** Summary & Prep *************//
	var hosts = crawler.hosts;

	hosts.sort(function (a, b) {
		if (a.url > b.url) { return 1; }
		if (a.url < b.url) { return -1; }
		return 0;
	});

	var statusCount = { 'pass': 0, 'mixedPassive': 0, 'mixedActive': 0, 'connectionError': 0, 'other': 0};
	hosts.forEach(function(host){
		switch(host.getFinalAssessment()){
			case constants['pass']:
				statusCount['pass'] ++;
				host.cssClass = 'green';
				break;
			case constants['mixedPassive']:
				statusCount['mixedPassive'] ++;
				host.cssClass = 'yellow';
				break;
			case constants['noValidResponse']:
			case constants['redirect']:
			case constants['undefined']:
				statusCount['other'] ++;
				host.cssClass = 'grey';
				break;
			case constants['mixedActive']:
				statusCount['mixedActive'] ++;
				host.cssClass = 'red';
				break;
			case constants['connectionError']:
				statusCount['connectionError'] ++;
				host.cssClass = 'red';
		}
		host.pages.forEach(function(page){
			if(page.activeMixedContent.length || page.status == constants['connectionError']){
				page.cssClass = "red";
			}else if(page.passiveMixedContent.length){
				page.cssClass = "yellow";
			}else if (page.status = constants['redirect'] || page.status == constants['noValidResponse']){
				page.cssClass = "grey";
			}else{
				page.cssClass = "";
			}
		});

	});

	stream.write('<div class="topBar"><img src="https://upload.wikimedia.org/wikipedia/commons/e/e6/Nuvola_mimetypes_encrypted.png">\r\n');
	stream.write('Report generated by SSL-Yeah!<br><a href="https://github.com/guiweber/ssl-yeah">https://github.com/guiweber/ssl-yeah</a></div>\r\n');
	stream.write('<div class="summary"><table>\r\n');
	stream.write('<tr><th colspan="4">HTTPS Test Report - '+crawler.baseHost+'</th></tr>\r\n');
	stream.write('<tr><td colspan="4">'+hosts.length+' sub-hosts tested</td></tr>\r\n');
	stream.write('<tr><td><div class="button green" ></div></td><td>'+statusCount['pass']+'</td><td>'+constants['pass']+'</td><td>All the pages tested in these hosts serve all content over HTTPS</td></tr>\r\n');
	stream.write('<tr><td><div class="button yellow" ></div></td><td>'+statusCount['mixedPassive']+'</td><td>'+constants['mixedPassive']+'</td><td>Some or all pages tested in these hosts serve passive content (i.e. images) over HTTP when HTTPS is requested. The images will load anyway but this could represent a security issue, and will trigger a mixed content warning in the browser.</td></tr>\r\n');
	stream.write('<tr><td><div class="button red" ></div></td><td>'+statusCount['mixedActive']+'</td><td>'+constants['mixedActive']+'</td><td>Some or all pages tested in these hosts serve active content (i.e. stylesheets, scripts, objects) over HTTP when HTTPS is requested. The content will not be loaded by the browser, which will be detrimental to the user experience.</td></tr>\r\n');
	stream.write('<tr><td><div class="button red" ></div></td><td>'+statusCount['connectionError']+'</td><td>'+constants['connectionError']+'</td><td>A secure connection could not be established to these hosts. Common causes are expired or invalid certificates, or invalid addresses.</td></tr>\r\n');
	stream.write('<tr><td><div class="button grey" ></div></td><td>'+statusCount['other']+'</td><td>N/A (No content tested)</td><td>All pages in these hosts were either rejected in conformity with robots.txt or internal URL standards, redirected to another location, or retured an invalid response (e.g. 403 - Forbidden, 404 - Not Found, etc...)</td></tr>\r\n');
	stream.write('<tr><td colspan="4">Click on the the color-coded buttons in the list below to show the details for each page/host when availble.</td></tr>\r\n');
	stream.write('</table></div>\r\n\r\n');


	//********** Detailed Report *********//
	var idCounter = 0;

	stream.write('<div class="hostList">\r\n');
	hosts.forEach(function(host){
		idCounter ++;
		stream.write('\r\n<h2><div class="button '+host.cssClass+'" onClick="$(\'#host_'+idCounter+'\').toggle(500)"></div>');
		stream.write(host.url + ' - ' + host.pages.length +' pages tested - ' + host.getFinalAssessment() + '</h2>');
		stream.write('<div id="host_'+ idCounter +'" style="display: none;">');
		if(host.pages.length == 0){
			stream.write('<div class="details">No page could be tested for this host. Check  <a href="https://'+host.url+'/robots.txt" target="_blank">robots.txt</a> to see if robots are allowed.</div>');
		}
		host.pages.forEach(function(page){
			idCounter ++;
			stream.write('\r\n<div class="pageTitleContainer">');
			if(page.passiveMixedContent.length || page.activeMixedContent.length || page.message || page.redirectedTo){
				stream.write('<div class="button '+page.cssClass+'" onClick="$(\'#page_'+idCounter+'\').toggle(600)"></div>');
			}else{
				stream.write('<div class="spacer"></div>');
			}
			stream.write('\r\n<div class="pageTitle">HTTP Status: '+page.httpStatus+' - <a href="https://' + page.url + '">'+ page.url.substring(0,150) +'</a></div></div>');
			if(page.passiveMixedContent.length || page.activeMixedContent.length || page.message || page.redirectedTo){
				stream.write('\r\n<div id="page_'+ idCounter +'" class="details" style="display: none;">');
				if(page.message){stream.write('<b>Error:</b> '+page.message+'<br>');}
				if(page.hasUnsecureBase){stream.write('<h4>Warning:</h4> The &#060;base&#062; tag of this page is hard-coded to HTTP. All relative URLs on this page will be loaded over an unsecure connection. This will cause content to be considered unsecure (active or passive mixed content - listed below if any) if referenced via relative URLs. Even if there is no such content on the page, a protocol relative &#060;base&#062; tag should be used instead.<br>');}
				if(page.redirectedTo){stream.write('Redirected to: '+page.redirectedTo.substring(0,150)+'<br>');}
				if(page.activeMixedContent.length){
					stream.write('\r\n<h4>Active Mixed Content</h4>');
					page.activeMixedContent.forEach(function(content){stream.write('\r\n' + content + '<br>');});
				}
				if(page.passiveMixedContent.length){
					stream.write('\r\n<h4>Passive Mixed Content</h4>');
					page.passiveMixedContent.forEach(function(content){stream.write('\r\n' + content + '<br>');});
				}
				stream.write('</div>');
			}
		});
		stream.write('</div>');
	});

	stream.write('</div></body></html>');
}
